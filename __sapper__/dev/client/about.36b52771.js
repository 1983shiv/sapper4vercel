import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, o as noop, e as element, c as claim_element, k as attr_dev, l as add_location, m as insert_dev, g as detach_dev, b as space, y as empty, h as claim_space, C as validate_each_argument, D as destroy_each, B as query_selector_all, n as append_dev, K as HtmlTag, p as create_component, t as text, a as svg_element, f as children, q as claim_component, j as claim_text, r as mount_component, u as transition_in, w as transition_out, x as destroy_component } from './client.473d16c7.js';
import { H as Heading } from './Heading.4cfe873f.js';
import { C as Contact } from './Contact.0274e9cf.js';

/* node_modules\svelte-seo\src\SvelteSeo.svelte generated by Svelte v3.29.4 */

const file = "node_modules\\svelte-seo\\src\\SvelteSeo.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[12] = list[i];
	return child_ctx;
}

function get_each_context_2(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

// (14:2) {#if title}
function create_if_block_26(ctx) {
	let title_value;
	document.title = title_value = /*title*/ ctx[0];
	const block = { c: noop, l: noop, m: noop, d: noop };

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_26.name,
		type: "if",
		source: "(14:2) {#if title}",
		ctx
	});

	return block;
}

// (25:2) {#if description}
function create_if_block_25(ctx) {
	let meta;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "description");
			attr_dev(meta, "content", /*description*/ ctx[3]);
			add_location(meta, file, 25, 4, 645);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*description*/ 8) {
				attr_dev(meta, "content", /*description*/ ctx[3]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_25.name,
		type: "if",
		source: "(25:2) {#if description}",
		ctx
	});

	return block;
}

// (29:2) {#if canonical}
function create_if_block_24(ctx) {
	let link;

	const block = {
		c: function create() {
			link = element("link");
			this.h();
		},
		l: function claim(nodes) {
			link = claim_element(nodes, "LINK", { rel: true, href: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(link, "rel", "canonical");
			attr_dev(link, "href", /*canonical*/ ctx[5]);
			add_location(link, file, 29, 4, 726);
		},
		m: function mount(target, anchor) {
			insert_dev(target, link, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*canonical*/ 32) {
				attr_dev(link, "href", /*canonical*/ ctx[5]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(link);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_24.name,
		type: "if",
		source: "(29:2) {#if canonical}",
		ctx
	});

	return block;
}

// (33:2) {#if keywords}
function create_if_block_23(ctx) {
	let meta;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "keywords");
			attr_dev(meta, "content", /*keywords*/ ctx[4]);
			add_location(meta, file, 33, 4, 797);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*keywords*/ 16) {
				attr_dev(meta, "content", /*keywords*/ ctx[4]);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_23.name,
		type: "if",
		source: "(33:2) {#if keywords}",
		ctx
	});

	return block;
}

// (37:2) {#if openGraph}
function create_if_block_7(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block5_anchor;
	let if_block0 = /*openGraph*/ ctx[6].title && create_if_block_22(ctx);
	let if_block1 = /*openGraph*/ ctx[6].description && create_if_block_21(ctx);
	let if_block2 = (/*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]) && create_if_block_20(ctx);
	let if_block3 = /*openGraph*/ ctx[6].type && create_if_block_19(ctx);
	let if_block4 = /*openGraph*/ ctx[6].article && create_if_block_12(ctx);
	let if_block5 = /*openGraph*/ ctx[6].images && /*openGraph*/ ctx[6].images.length && create_if_block_8(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t4 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			if_block5_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*openGraph*/ ctx[6].title) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_22(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*openGraph*/ ctx[6].description) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_21(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_20(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*openGraph*/ ctx[6].type) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_19(ctx);
					if_block3.c();
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*openGraph*/ ctx[6].article) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_12(ctx);
					if_block4.c();
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*openGraph*/ ctx[6].images && /*openGraph*/ ctx[6].images.length) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_8(ctx);
					if_block5.c();
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach_dev(if_block5_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(37:2) {#if openGraph}",
		ctx
	});

	return block;
}

// (38:4) {#if openGraph.title}
function create_if_block_22(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:title");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].title);
			add_location(meta, file, 38, 8, 902);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].title)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_22.name,
		type: "if",
		source: "(38:4) {#if openGraph.title}",
		ctx
	});

	return block;
}

// (42:4) {#if openGraph.description}
function create_if_block_21(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:description");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].description);
			add_location(meta, file, 42, 6, 1006);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].description)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_21.name,
		type: "if",
		source: "(42:4) {#if openGraph.description}",
		ctx
	});

	return block;
}

// (46:4) {#if openGraph.url || canonical}
function create_if_block_20(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:url");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].url || /*canonical*/ ctx[5]);
			add_location(meta, file, 46, 6, 1127);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph, canonical*/ 96 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].url || /*canonical*/ ctx[5])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_20.name,
		type: "if",
		source: "(46:4) {#if openGraph.url || canonical}",
		ctx
	});

	return block;
}

// (50:4) {#if openGraph.type}
function create_if_block_19(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:type");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].type.toLowerCase());
			add_location(meta, file, 50, 6, 1233);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].type.toLowerCase())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_19.name,
		type: "if",
		source: "(50:4) {#if openGraph.type}",
		ctx
	});

	return block;
}

// (54:4) {#if openGraph.article}
function create_if_block_12(ctx) {
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block5_anchor;
	let if_block0 = /*openGraph*/ ctx[6].article.publishedTime && create_if_block_18(ctx);
	let if_block1 = /*openGraph*/ ctx[6].article.modifiedTime && create_if_block_17(ctx);
	let if_block2 = /*openGraph*/ ctx[6].article.expirationTime && create_if_block_16(ctx);
	let if_block3 = /*openGraph*/ ctx[6].article.section && create_if_block_15(ctx);
	let if_block4 = /*openGraph*/ ctx[6].article.authors && /*openGraph*/ ctx[6].article.authors.length && create_if_block_14(ctx);
	let if_block5 = /*openGraph*/ ctx[6].article.tags && /*openGraph*/ ctx[6].article.tags.length && create_if_block_13(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			if (if_block1) if_block1.c();
			t1 = space();
			if (if_block2) if_block2.c();
			t2 = space();
			if (if_block3) if_block3.c();
			t3 = space();
			if (if_block4) if_block4.c();
			t4 = space();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
		},
		l: function claim(nodes) {
			if (if_block0) if_block0.l(nodes);
			t0 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t1 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t2 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t3 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			t4 = claim_space(nodes);
			if (if_block5) if_block5.l(nodes);
			if_block5_anchor = empty();
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block5) if_block5.m(target, anchor);
			insert_dev(target, if_block5_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*openGraph*/ ctx[6].article.publishedTime) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_18(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*openGraph*/ ctx[6].article.modifiedTime) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_17(ctx);
					if_block1.c();
					if_block1.m(t1.parentNode, t1);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*openGraph*/ ctx[6].article.expirationTime) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_16(ctx);
					if_block2.c();
					if_block2.m(t2.parentNode, t2);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*openGraph*/ ctx[6].article.section) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_15(ctx);
					if_block3.c();
					if_block3.m(t3.parentNode, t3);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*openGraph*/ ctx[6].article.authors && /*openGraph*/ ctx[6].article.authors.length) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_14(ctx);
					if_block4.c();
					if_block4.m(t4.parentNode, t4);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*openGraph*/ ctx[6].article.tags && /*openGraph*/ ctx[6].article.tags.length) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_13(ctx);
					if_block5.c();
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block5) if_block5.d(detaching);
			if (detaching) detach_dev(if_block5_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_12.name,
		type: "if",
		source: "(54:4) {#if openGraph.article}",
		ctx
	});

	return block;
}

// (55:6) {#if openGraph.article.publishedTime}
function create_if_block_18(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:published_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.publishedTime);
			add_location(meta, file, 55, 8, 1391);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.publishedTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_18.name,
		type: "if",
		source: "(55:6) {#if openGraph.article.publishedTime}",
		ctx
	});

	return block;
}

// (61:6) {#if openGraph.article.modifiedTime}
function create_if_block_17(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:modified_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.modifiedTime);
			add_location(meta, file, 61, 8, 1560);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.modifiedTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_17.name,
		type: "if",
		source: "(61:6) {#if openGraph.article.modifiedTime}",
		ctx
	});

	return block;
}

// (67:6) {#if openGraph.article.expirationTime}
function create_if_block_16(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:expiration_time");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.expirationTime);
			add_location(meta, file, 67, 8, 1729);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.expirationTime)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_16.name,
		type: "if",
		source: "(67:6) {#if openGraph.article.expirationTime}",
		ctx
	});

	return block;
}

// (73:6) {#if openGraph.article.section}
function create_if_block_15(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:section");
			attr_dev(meta, "content", meta_content_value = /*openGraph*/ ctx[6].article.section);
			add_location(meta, file, 73, 8, 1895);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*openGraph*/ ctx[6].article.section)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_15.name,
		type: "if",
		source: "(73:6) {#if openGraph.article.section}",
		ctx
	});

	return block;
}

// (77:6) {#if openGraph.article.authors && openGraph.article.authors.length}
function create_if_block_14(ctx) {
	let each_1_anchor;
	let each_value_2 = /*openGraph*/ ctx[6].article.authors;
	validate_each_argument(each_value_2);
	let each_blocks = [];

	for (let i = 0; i < each_value_2.length; i += 1) {
		each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value_2 = /*openGraph*/ ctx[6].article.authors;
				validate_each_argument(each_value_2);
				let i;

				for (i = 0; i < each_value_2.length; i += 1) {
					const child_ctx = get_each_context_2(ctx, each_value_2, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_2(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_2.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_14.name,
		type: "if",
		source: "(77:6) {#if openGraph.article.authors && openGraph.article.authors.length}",
		ctx
	});

	return block;
}

// (78:8) {#each openGraph.article.authors as author}
function create_each_block_2(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:author");
			attr_dev(meta, "content", meta_content_value = /*author*/ ctx[15]);
			add_location(meta, file, 78, 10, 2116);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*author*/ ctx[15])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_2.name,
		type: "each",
		source: "(78:8) {#each openGraph.article.authors as author}",
		ctx
	});

	return block;
}

// (83:6) {#if openGraph.article.tags && openGraph.article.tags.length}
function create_if_block_13(ctx) {
	let each_1_anchor;
	let each_value_1 = /*openGraph*/ ctx[6].article.tags;
	validate_each_argument(each_value_1);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value_1 = /*openGraph*/ ctx[6].article.tags;
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_13.name,
		type: "if",
		source: "(83:6) {#if openGraph.article.tags && openGraph.article.tags.length}",
		ctx
	});

	return block;
}

// (84:8) {#each openGraph.article.tags as tag}
function create_each_block_1(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "article:tag");
			attr_dev(meta, "content", meta_content_value = /*tag*/ ctx[12]);
			add_location(meta, file, 84, 10, 2321);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*tag*/ ctx[12])) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(84:8) {#each openGraph.article.tags as tag}",
		ctx
	});

	return block;
}

// (90:4) {#if openGraph.images && openGraph.images.length}
function create_if_block_8(ctx) {
	let each_1_anchor;
	let each_value = /*openGraph*/ ctx[6].images;
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const block = {
		c: function create() {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
		},
		l: function claim(nodes) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
		},
		m: function mount(target, anchor) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert_dev(target, each_1_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64) {
				each_value = /*openGraph*/ ctx[6].images;
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d: function destroy(detaching) {
			destroy_each(each_blocks, detaching);
			if (detaching) detach_dev(each_1_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_8.name,
		type: "if",
		source: "(90:4) {#if openGraph.images && openGraph.images.length}",
		ctx
	});

	return block;
}

// (93:8) {#if image.alt}
function create_if_block_11(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:alt");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[9].alt);
			add_location(meta, file, 93, 10, 2591);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[9].alt)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_11.name,
		type: "if",
		source: "(93:8) {#if image.alt}",
		ctx
	});

	return block;
}

// (96:8) {#if image.width}
function create_if_block_10(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:width");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[9].width.toString());
			add_location(meta, file, 96, 10, 2694);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[9].width.toString())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_10.name,
		type: "if",
		source: "(96:8) {#if image.width}",
		ctx
	});

	return block;
}

// (99:8) {#if image.height}
function create_if_block_9(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image:height");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[9].height.toString());
			add_location(meta, file, 99, 10, 2813);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[9].height.toString())) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_9.name,
		type: "if",
		source: "(99:8) {#if image.height}",
		ctx
	});

	return block;
}

// (91:6) {#each openGraph.images as image}
function create_each_block(ctx) {
	let meta;
	let meta_content_value;
	let t0;
	let t1;
	let t2;
	let if_block2_anchor;
	let if_block0 = /*image*/ ctx[9].alt && create_if_block_11(ctx);
	let if_block1 = /*image*/ ctx[9].width && create_if_block_10(ctx);
	let if_block2 = /*image*/ ctx[9].height && create_if_block_9(ctx);

	const block = {
		c: function create() {
			meta = element("meta");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { property: true, content: true });
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			if_block2_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "property", "og:image");
			attr_dev(meta, "content", meta_content_value = /*image*/ ctx[9].url);
			add_location(meta, file, 91, 8, 2508);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, if_block2_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*openGraph*/ 64 && meta_content_value !== (meta_content_value = /*image*/ ctx[9].url)) {
				attr_dev(meta, "content", meta_content_value);
			}

			if (/*image*/ ctx[9].alt) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_11(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*image*/ ctx[9].width) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_10(ctx);
					if_block1.c();
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*image*/ ctx[9].height) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_9(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(if_block2_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(91:6) {#each openGraph.images as image}",
		ctx
	});

	return block;
}

// (106:2) {#if twitter}
function create_if_block_1(ctx) {
	let meta;
	let t0;
	let t1;
	let t2;
	let t3;
	let t4;
	let if_block4_anchor;
	let if_block0 = /*twitter*/ ctx[7].site && create_if_block_6(ctx);
	let if_block1 = /*twitter*/ ctx[7].title && create_if_block_5(ctx);
	let if_block2 = /*twitter*/ ctx[7].description && create_if_block_4(ctx);
	let if_block3 = /*twitter*/ ctx[7].image && create_if_block_3(ctx);
	let if_block4 = /*twitter*/ ctx[7].imageAlt && create_if_block_2(ctx);

	const block = {
		c: function create() {
			meta = element("meta");
			t0 = space();
			if (if_block0) if_block0.c();
			t1 = space();
			if (if_block1) if_block1.c();
			t2 = space();
			if (if_block2) if_block2.c();
			t3 = space();
			if (if_block3) if_block3.c();
			t4 = space();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			t0 = claim_space(nodes);
			if (if_block0) if_block0.l(nodes);
			t1 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			t2 = claim_space(nodes);
			if (if_block2) if_block2.l(nodes);
			t3 = claim_space(nodes);
			if (if_block3) if_block3.l(nodes);
			t4 = claim_space(nodes);
			if (if_block4) if_block4.l(nodes);
			if_block4_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:card");
			attr_dev(meta, "content", "summary_large_image");
			add_location(meta, file, 106, 4, 2950);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
			insert_dev(target, t0, anchor);
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t1, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert_dev(target, t2, anchor);
			if (if_block2) if_block2.m(target, anchor);
			insert_dev(target, t3, anchor);
			if (if_block3) if_block3.m(target, anchor);
			insert_dev(target, t4, anchor);
			if (if_block4) if_block4.m(target, anchor);
			insert_dev(target, if_block4_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (/*twitter*/ ctx[7].site) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_6(ctx);
					if_block0.c();
					if_block0.m(t1.parentNode, t1);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (/*twitter*/ ctx[7].title) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_5(ctx);
					if_block1.c();
					if_block1.m(t2.parentNode, t2);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*twitter*/ ctx[7].description) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_4(ctx);
					if_block2.c();
					if_block2.m(t3.parentNode, t3);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*twitter*/ ctx[7].image) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_3(ctx);
					if_block3.c();
					if_block3.m(t4.parentNode, t4);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*twitter*/ ctx[7].imageAlt) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_2(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
			if (detaching) detach_dev(t0);
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t1);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach_dev(t2);
			if (if_block2) if_block2.d(detaching);
			if (detaching) detach_dev(t3);
			if (if_block3) if_block3.d(detaching);
			if (detaching) detach_dev(t4);
			if (if_block4) if_block4.d(detaching);
			if (detaching) detach_dev(if_block4_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(106:2) {#if twitter}",
		ctx
	});

	return block;
}

// (108:4) {#if twitter.site}
function create_if_block_6(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:site");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].site);
			add_location(meta, file, 108, 6, 3038);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].site)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(108:4) {#if twitter.site}",
		ctx
	});

	return block;
}

// (114:4) {#if twitter.title}
function create_if_block_5(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:title");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].title);
			add_location(meta, file, 114, 6, 3152);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].title)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(114:4) {#if twitter.title}",
		ctx
	});

	return block;
}

// (120:4) {#if twitter.description}
function create_if_block_4(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:description");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].description);
			add_location(meta, file, 120, 6, 3274);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].description)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(120:4) {#if twitter.description}",
		ctx
	});

	return block;
}

// (126:4) {#if twitter.image}
function create_if_block_3(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:image");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].image);
			add_location(meta, file, 126, 6, 3402);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].image)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(126:4) {#if twitter.image}",
		ctx
	});

	return block;
}

// (132:4) {#if twitter.imageAlt}
function create_if_block_2(ctx) {
	let meta;
	let meta_content_value;

	const block = {
		c: function create() {
			meta = element("meta");
			this.h();
		},
		l: function claim(nodes) {
			meta = claim_element(nodes, "META", { name: true, content: true });
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta, "name", "twitter:image:alt");
			attr_dev(meta, "content", meta_content_value = /*twitter*/ ctx[7].imageAlt);
			add_location(meta, file, 132, 6, 3521);
		},
		m: function mount(target, anchor) {
			insert_dev(target, meta, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*twitter*/ 128 && meta_content_value !== (meta_content_value = /*twitter*/ ctx[7].imageAlt)) {
				attr_dev(meta, "content", meta_content_value);
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(meta);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(132:4) {#if twitter.imageAlt}",
		ctx
	});

	return block;
}

// (140:2) {#if jsonLd}
function create_if_block(ctx) {
	let html_tag;

	let raw_value = `<script type="application/ld+json">${JSON.stringify({
		"@context": "https://schema.org",
		.../*jsonLd*/ ctx[8]
	}) + "<"}/script>` + "";

	let html_anchor;

	const block = {
		c: function create() {
			html_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			html_anchor = empty();
			this.h();
		},
		h: function hydrate() {
			html_tag = new HtmlTag(html_anchor);
		},
		m: function mount(target, anchor) {
			html_tag.m(raw_value, target, anchor);
			insert_dev(target, html_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*jsonLd*/ 256 && raw_value !== (raw_value = `<script type="application/ld+json">${JSON.stringify({
				"@context": "https://schema.org",
				.../*jsonLd*/ ctx[8]
			}) + "<"}/script>` + "")) html_tag.p(raw_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(html_anchor);
			if (detaching) html_tag.d();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(140:2) {#if jsonLd}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let meta0;
	let meta0_content_value;
	let meta1;
	let meta1_content_value;
	let if_block1_anchor;
	let if_block2_anchor;
	let if_block3_anchor;
	let if_block4_anchor;
	let if_block5_anchor;
	let if_block6_anchor;
	let if_block0 = /*title*/ ctx[0] && create_if_block_26(ctx);
	let if_block1 = /*description*/ ctx[3] && create_if_block_25(ctx);
	let if_block2 = /*canonical*/ ctx[5] && create_if_block_24(ctx);
	let if_block3 = /*keywords*/ ctx[4] && create_if_block_23(ctx);
	let if_block4 = /*openGraph*/ ctx[6] && create_if_block_7(ctx);
	let if_block5 = /*twitter*/ ctx[7] && create_if_block_1(ctx);
	let if_block6 = /*jsonLd*/ ctx[8] && create_if_block(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			meta0 = element("meta");
			meta1 = element("meta");
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			if (if_block2) if_block2.c();
			if_block2_anchor = empty();
			if (if_block3) if_block3.c();
			if_block3_anchor = empty();
			if (if_block4) if_block4.c();
			if_block4_anchor = empty();
			if (if_block5) if_block5.c();
			if_block5_anchor = empty();
			if (if_block6) if_block6.c();
			if_block6_anchor = empty();
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1f0hxex\"]", document.head);
			if (if_block0) if_block0.l(head_nodes);
			meta0 = claim_element(head_nodes, "META", { name: true, content: true });
			meta1 = claim_element(head_nodes, "META", { name: true, content: true });
			if (if_block1) if_block1.l(head_nodes);
			if_block1_anchor = empty();
			if (if_block2) if_block2.l(head_nodes);
			if_block2_anchor = empty();
			if (if_block3) if_block3.l(head_nodes);
			if_block3_anchor = empty();
			if (if_block4) if_block4.l(head_nodes);
			if_block4_anchor = empty();
			if (if_block5) if_block5.l(head_nodes);
			if_block5_anchor = empty();
			if (if_block6) if_block6.l(head_nodes);
			if_block6_anchor = empty();
			head_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(meta0, "name", "robots");
			attr_dev(meta0, "content", meta0_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`);
			add_location(meta0, file, 17, 2, 391);
			attr_dev(meta1, "name", "googlebot");
			attr_dev(meta1, "content", meta1_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`);
			add_location(meta1, file, 20, 2, 505);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(document.head, null);
			append_dev(document.head, meta0);
			append_dev(document.head, meta1);
			if (if_block1) if_block1.m(document.head, null);
			append_dev(document.head, if_block1_anchor);
			if (if_block2) if_block2.m(document.head, null);
			append_dev(document.head, if_block2_anchor);
			if (if_block3) if_block3.m(document.head, null);
			append_dev(document.head, if_block3_anchor);
			if (if_block4) if_block4.m(document.head, null);
			append_dev(document.head, if_block4_anchor);
			if (if_block5) if_block5.m(document.head, null);
			append_dev(document.head, if_block5_anchor);
			if (if_block6) if_block6.m(document.head, null);
			append_dev(document.head, if_block6_anchor);
		},
		p: function update(ctx, [dirty]) {
			if (/*title*/ ctx[0]) {
				if (if_block0) ; else {
					if_block0 = create_if_block_26(ctx);
					if_block0.c();
					if_block0.m(meta0.parentNode, meta0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*noindex, nofollow*/ 6 && meta0_content_value !== (meta0_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`)) {
				attr_dev(meta0, "content", meta0_content_value);
			}

			if (dirty & /*noindex, nofollow*/ 6 && meta1_content_value !== (meta1_content_value = `${/*noindex*/ ctx[1] ? "noindex" : "index"},${/*nofollow*/ ctx[2] ? "nofollow" : "follow"}`)) {
				attr_dev(meta1, "content", meta1_content_value);
			}

			if (/*description*/ ctx[3]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_25(ctx);
					if_block1.c();
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (/*canonical*/ ctx[5]) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_24(ctx);
					if_block2.c();
					if_block2.m(if_block2_anchor.parentNode, if_block2_anchor);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (/*keywords*/ ctx[4]) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_23(ctx);
					if_block3.c();
					if_block3.m(if_block3_anchor.parentNode, if_block3_anchor);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (/*openGraph*/ ctx[6]) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_7(ctx);
					if_block4.c();
					if_block4.m(if_block4_anchor.parentNode, if_block4_anchor);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (/*twitter*/ ctx[7]) {
				if (if_block5) {
					if_block5.p(ctx, dirty);
				} else {
					if_block5 = create_if_block_1(ctx);
					if_block5.c();
					if_block5.m(if_block5_anchor.parentNode, if_block5_anchor);
				}
			} else if (if_block5) {
				if_block5.d(1);
				if_block5 = null;
			}

			if (/*jsonLd*/ ctx[8]) {
				if (if_block6) {
					if_block6.p(ctx, dirty);
				} else {
					if_block6 = create_if_block(ctx);
					if_block6.c();
					if_block6.m(if_block6_anchor.parentNode, if_block6_anchor);
				}
			} else if (if_block6) {
				if_block6.d(1);
				if_block6 = null;
			}
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			detach_dev(meta0);
			detach_dev(meta1);
			if (if_block1) if_block1.d(detaching);
			detach_dev(if_block1_anchor);
			if (if_block2) if_block2.d(detaching);
			detach_dev(if_block2_anchor);
			if (if_block3) if_block3.d(detaching);
			detach_dev(if_block3_anchor);
			if (if_block4) if_block4.d(detaching);
			detach_dev(if_block4_anchor);
			if (if_block5) if_block5.d(detaching);
			detach_dev(if_block5_anchor);
			if (if_block6) if_block6.d(detaching);
			detach_dev(if_block6_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("SvelteSeo", slots, []);
	let { title = undefined } = $$props;
	let { noindex = false } = $$props;
	let { nofollow = false } = $$props;
	let { description = undefined } = $$props;
	let { keywords = undefined } = $$props;
	let { canonical = undefined } = $$props;
	let { openGraph = undefined } = $$props;
	let { twitter = undefined } = $$props;
	let { jsonLd = undefined } = $$props;

	const writable_props = [
		"title",
		"noindex",
		"nofollow",
		"description",
		"keywords",
		"canonical",
		"openGraph",
		"twitter",
		"jsonLd"
	];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<SvelteSeo> was created with unknown prop '${key}'`);
	});

	$$self.$$set = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("noindex" in $$props) $$invalidate(1, noindex = $$props.noindex);
		if ("nofollow" in $$props) $$invalidate(2, nofollow = $$props.nofollow);
		if ("description" in $$props) $$invalidate(3, description = $$props.description);
		if ("keywords" in $$props) $$invalidate(4, keywords = $$props.keywords);
		if ("canonical" in $$props) $$invalidate(5, canonical = $$props.canonical);
		if ("openGraph" in $$props) $$invalidate(6, openGraph = $$props.openGraph);
		if ("twitter" in $$props) $$invalidate(7, twitter = $$props.twitter);
		if ("jsonLd" in $$props) $$invalidate(8, jsonLd = $$props.jsonLd);
	};

	$$self.$capture_state = () => ({
		title,
		noindex,
		nofollow,
		description,
		keywords,
		canonical,
		openGraph,
		twitter,
		jsonLd
	});

	$$self.$inject_state = $$props => {
		if ("title" in $$props) $$invalidate(0, title = $$props.title);
		if ("noindex" in $$props) $$invalidate(1, noindex = $$props.noindex);
		if ("nofollow" in $$props) $$invalidate(2, nofollow = $$props.nofollow);
		if ("description" in $$props) $$invalidate(3, description = $$props.description);
		if ("keywords" in $$props) $$invalidate(4, keywords = $$props.keywords);
		if ("canonical" in $$props) $$invalidate(5, canonical = $$props.canonical);
		if ("openGraph" in $$props) $$invalidate(6, openGraph = $$props.openGraph);
		if ("twitter" in $$props) $$invalidate(7, twitter = $$props.twitter);
		if ("jsonLd" in $$props) $$invalidate(8, jsonLd = $$props.jsonLd);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		title,
		noindex,
		nofollow,
		description,
		keywords,
		canonical,
		openGraph,
		twitter,
		jsonLd
	];
}

class SvelteSeo extends SvelteComponentDev {
	constructor(options) {
		super(options);

		init(this, options, instance, create_fragment, safe_not_equal, {
			title: 0,
			noindex: 1,
			nofollow: 2,
			description: 3,
			keywords: 4,
			canonical: 5,
			openGraph: 6,
			twitter: 7,
			jsonLd: 8
		});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "SvelteSeo",
			options,
			id: create_fragment.name
		});
	}

	get title() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set title(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get noindex() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set noindex(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get nofollow() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set nofollow(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get description() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set description(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get keywords() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set keywords(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get canonical() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set canonical(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get openGraph() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set openGraph(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get twitter() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set twitter(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	get jsonLd() {
		throw new Error("<SvelteSeo>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}

	set jsonLd(value) {
		throw new Error("<SvelteSeo>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
	}
}

/* src\components\about\Whyus.svelte generated by Svelte v3.29.4 */
const file$1 = "src\\components\\about\\Whyus.svelte";

function create_fragment$1(ctx) {
	let section;
	let div24;
	let div1;
	let div0;
	let heading;
	let t0;
	let p0;
	let t1;
	let t2;
	let div23;
	let div4;
	let div3;
	let div2;
	let svg0;
	let path0;
	let path1;
	let line0;
	let line1;
	let line2;
	let t3;
	let h20;
	let t4;
	let t5;
	let p1;
	let t6;
	let t7;
	let div7;
	let div6;
	let div5;
	let svg1;
	let path2;
	let path3;
	let path4;
	let t8;
	let h21;
	let t9;
	let t10;
	let p2;
	let t11;
	let t12;
	let div10;
	let div9;
	let div8;
	let svg2;
	let path5;
	let rect0;
	let rect1;
	let rect2;
	let path6;
	let line3;
	let t13;
	let h22;
	let t14;
	let t15;
	let p3;
	let t16;
	let t17;
	let div13;
	let div12;
	let div11;
	let svg3;
	let path7;
	let line4;
	let path8;
	let line5;
	let line6;
	let path9;
	let t18;
	let h23;
	let t19;
	let t20;
	let p4;
	let t21;
	let t22;
	let div16;
	let div15;
	let div14;
	let svg4;
	let path10;
	let path11;
	let path12;
	let t23;
	let h24;
	let t24;
	let t25;
	let p5;
	let t26;
	let t27;
	let div19;
	let div18;
	let div17;
	let svg5;
	let path13;
	let circle;
	let t28;
	let h25;
	let t29;
	let t30;
	let p6;
	let t31;
	let t32;
	let div22;
	let div21;
	let div20;
	let svg6;
	let path14;
	let path15;
	let path16;
	let path17;
	let path18;
	let line7;
	let line8;
	let path19;
	let t33;
	let h26;
	let t34;
	let t35;
	let p7;
	let t36;
	let current;

	heading = new Heading({
			props: {
				text: "Why Us",
				size: "text-2xl sm:text-3xl md:text-4xl",
				heading: "font-heading1 border-b-2",
				color: "text-pink-500"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			div24 = element("div");
			div1 = element("div");
			div0 = element("div");
			create_component(heading.$$.fragment);
			t0 = space();
			p0 = element("p");
			t1 = text("Our results and 480+ happy clients clearly indicate that we possess\r\n        exception skills and expertise.");
			t2 = space();
			div23 = element("div");
			div4 = element("div");
			div3 = element("div");
			div2 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			line0 = svg_element("line");
			line1 = svg_element("line");
			line2 = svg_element("line");
			t3 = space();
			h20 = element("h2");
			t4 = text("Personalised Support");
			t5 = space();
			p1 = element("p");
			t6 = text("We eliminate hoops in communication and deliver a direct and\r\n            personalised support via chat, skype/zoom, emailing, remote\r\n            connection etc.");
			t7 = space();
			div7 = element("div");
			div6 = element("div");
			div5 = element("div");
			svg1 = svg_element("svg");
			path2 = svg_element("path");
			path3 = svg_element("path");
			path4 = svg_element("path");
			t8 = space();
			h21 = element("h2");
			t9 = text("Immediate And Efficient Communication");
			t10 = space();
			p2 = element("p");
			t11 = text("We streamline communication between our team and your team by\r\n            posting progress updates on regularl basis, so we can be on same\r\n            board.");
			t12 = space();
			div10 = element("div");
			div9 = element("div");
			div8 = element("div");
			svg2 = svg_element("svg");
			path5 = svg_element("path");
			rect0 = svg_element("rect");
			rect1 = svg_element("rect");
			rect2 = svg_element("rect");
			path6 = svg_element("path");
			line3 = svg_element("line");
			t13 = space();
			h22 = element("h2");
			t14 = text("Flexible And Dynamic");
			t15 = space();
			p3 = element("p");
			t16 = text("We help your business to move fast in today's digital era where\r\n            business presence is 24 x 7 and opportunity might come at any\r\n            time.progress updates on regularl basis, so we can be on same board.");
			t17 = space();
			div13 = element("div");
			div12 = element("div");
			div11 = element("div");
			svg3 = svg_element("svg");
			path7 = svg_element("path");
			line4 = svg_element("line");
			path8 = svg_element("path");
			line5 = svg_element("line");
			line6 = svg_element("line");
			path9 = svg_element("path");
			t18 = space();
			h23 = element("h2");
			t19 = text("Effective And Impactful Outcomes");
			t20 = space();
			p4 = element("p");
			t21 = text("We focus on the customer experience from the day start. In\r\n            combination with our agile approach towards each product, we deliver\r\n            the qaulity that improve your business presence and makes an impact.");
			t22 = space();
			div16 = element("div");
			div15 = element("div");
			div14 = element("div");
			svg4 = svg_element("svg");
			path10 = svg_element("path");
			path11 = svg_element("path");
			path12 = svg_element("path");
			t23 = space();
			h24 = element("h2");
			t24 = text("Great ROI");
			t25 = space();
			p5 = element("p");
			t26 = text("Although we’re a team, we do not overcharge to our clients just to\r\n            keep our team members work loaded. We have been accurate and digital\r\n            from the start. Using our small team, we focus on delivering the\r\n            best product design/development, without wasting your time and\r\n            budget.");
			t27 = space();
			div19 = element("div");
			div18 = element("div");
			div17 = element("div");
			svg5 = svg_element("svg");
			path13 = svg_element("path");
			circle = svg_element("circle");
			t28 = space();
			h25 = element("h2");
			t29 = text("Undivided attention");
			t30 = space();
			p6 = element("p");
			t31 = text("When we take on your project, our team is fully committed from start\r\n            to finish. It means constant progress, uninterrupted focus and\r\n            tangible results. When you decide to work with us, your project will\r\n            get all attention that it deserves.");
			t32 = space();
			div22 = element("div");
			div21 = element("div");
			div20 = element("div");
			svg6 = svg_element("svg");
			path14 = svg_element("path");
			path15 = svg_element("path");
			path16 = svg_element("path");
			path17 = svg_element("path");
			path18 = svg_element("path");
			line7 = svg_element("line");
			line8 = svg_element("line");
			path19 = svg_element("path");
			t33 = space();
			h26 = element("h2");
			t34 = text("Small yet result oriented");
			t35 = space();
			p7 = element("p");
			t36 = text("We are a team of passionate designers, developers with a strong zeal\r\n            to work with SMEs, emerging startups and individuals who need\r\n            technical help. We love coming to work every day and figuring out a\r\n            better World Wide Web for businesses and the end-users.");
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { id: true, class: true });
			var section_nodes = children(section);
			div24 = claim_element(section_nodes, "DIV", { class: true });
			var div24_nodes = children(div24);
			div1 = claim_element(div24_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(heading.$$.fragment, div0_nodes);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(div1_nodes);
			p0 = claim_element(div1_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t1 = claim_text(p0_nodes, "Our results and 480+ happy clients clearly indicate that we possess\r\n        exception skills and expertise.");
			p0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div24_nodes);
			div23 = claim_element(div24_nodes, "DIV", { class: true });
			var div23_nodes = children(div23);
			div4 = claim_element(div23_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);

			svg0 = claim_element(
				div2_nodes,
				"svg",
				{
					class: true,
					viewBox: true,
					width: true,
					height: true,
					xmlns: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg0_nodes = children(svg0);
			path0 = claim_element(svg0_nodes, "path", { d: true }, 1);
			children(path0).forEach(detach_dev);
			path1 = claim_element(svg0_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach_dev);
			line0 = claim_element(svg0_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach_dev);
			line1 = claim_element(svg0_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach_dev);
			line2 = claim_element(svg0_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line2).forEach(detach_dev);
			svg0_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t3 = claim_space(div3_nodes);
			h20 = claim_element(div3_nodes, "H2", { class: true });
			var h20_nodes = children(h20);
			t4 = claim_text(h20_nodes, "Personalised Support");
			h20_nodes.forEach(detach_dev);
			t5 = claim_space(div3_nodes);
			p1 = claim_element(div3_nodes, "P", { class: true });
			var p1_nodes = children(p1);
			t6 = claim_text(p1_nodes, "We eliminate hoops in communication and deliver a direct and\r\n            personalised support via chat, skype/zoom, emailing, remote\r\n            connection etc.");
			p1_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			t7 = claim_space(div23_nodes);
			div7 = claim_element(div23_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			div6 = claim_element(div7_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			div5 = claim_element(div6_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);

			svg1 = claim_element(
				div5_nodes,
				"svg",
				{
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg1_nodes = children(svg1);
			path2 = claim_element(svg1_nodes, "path", { stroke: true, d: true }, 1);
			children(path2).forEach(detach_dev);
			path3 = claim_element(svg1_nodes, "path", { d: true }, 1);
			children(path3).forEach(detach_dev);
			path4 = claim_element(svg1_nodes, "path", { d: true }, 1);
			children(path4).forEach(detach_dev);
			svg1_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t8 = claim_space(div6_nodes);
			h21 = claim_element(div6_nodes, "H2", { class: true });
			var h21_nodes = children(h21);
			t9 = claim_text(h21_nodes, "Immediate And Efficient Communication");
			h21_nodes.forEach(detach_dev);
			t10 = claim_space(div6_nodes);
			p2 = claim_element(div6_nodes, "P", { class: true });
			var p2_nodes = children(p2);
			t11 = claim_text(p2_nodes, "We streamline communication between our team and your team by\r\n            posting progress updates on regularl basis, so we can be on same\r\n            board.");
			p2_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			div7_nodes.forEach(detach_dev);
			t12 = claim_space(div23_nodes);
			div10 = claim_element(div23_nodes, "DIV", { class: true });
			var div10_nodes = children(div10);
			div9 = claim_element(div10_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);

			svg2 = claim_element(
				div8_nodes,
				"svg",
				{
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg2_nodes = children(svg2);
			path5 = claim_element(svg2_nodes, "path", { stroke: true, d: true }, 1);
			children(path5).forEach(detach_dev);

			rect0 = claim_element(
				svg2_nodes,
				"rect",
				{
					x: true,
					y: true,
					width: true,
					height: true,
					rx: true
				},
				1
			);

			children(rect0).forEach(detach_dev);

			rect1 = claim_element(
				svg2_nodes,
				"rect",
				{
					x: true,
					y: true,
					width: true,
					height: true,
					rx: true
				},
				1
			);

			children(rect1).forEach(detach_dev);

			rect2 = claim_element(
				svg2_nodes,
				"rect",
				{
					x: true,
					y: true,
					width: true,
					height: true,
					rx: true
				},
				1
			);

			children(rect2).forEach(detach_dev);
			path6 = claim_element(svg2_nodes, "path", { d: true }, 1);
			children(path6).forEach(detach_dev);
			line3 = claim_element(svg2_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line3).forEach(detach_dev);
			svg2_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			t13 = claim_space(div9_nodes);
			h22 = claim_element(div9_nodes, "H2", { class: true });
			var h22_nodes = children(h22);
			t14 = claim_text(h22_nodes, "Flexible And Dynamic");
			h22_nodes.forEach(detach_dev);
			t15 = claim_space(div9_nodes);
			p3 = claim_element(div9_nodes, "P", { class: true });
			var p3_nodes = children(p3);
			t16 = claim_text(p3_nodes, "We help your business to move fast in today's digital era where\r\n            business presence is 24 x 7 and opportunity might come at any\r\n            time.progress updates on regularl basis, so we can be on same board.");
			p3_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			div10_nodes.forEach(detach_dev);
			t17 = claim_space(div23_nodes);
			div13 = claim_element(div23_nodes, "DIV", { class: true });
			var div13_nodes = children(div13);
			div12 = claim_element(div13_nodes, "DIV", { class: true });
			var div12_nodes = children(div12);
			div11 = claim_element(div12_nodes, "DIV", { class: true });
			var div11_nodes = children(div11);

			svg3 = claim_element(
				div11_nodes,
				"svg",
				{
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg3_nodes = children(svg3);
			path7 = claim_element(svg3_nodes, "path", { stroke: true, d: true }, 1);
			children(path7).forEach(detach_dev);
			line4 = claim_element(svg3_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line4).forEach(detach_dev);
			path8 = claim_element(svg3_nodes, "path", { d: true }, 1);
			children(path8).forEach(detach_dev);
			line5 = claim_element(svg3_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line5).forEach(detach_dev);
			line6 = claim_element(svg3_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line6).forEach(detach_dev);
			path9 = claim_element(svg3_nodes, "path", { d: true }, 1);
			children(path9).forEach(detach_dev);
			svg3_nodes.forEach(detach_dev);
			div11_nodes.forEach(detach_dev);
			t18 = claim_space(div12_nodes);
			h23 = claim_element(div12_nodes, "H2", { class: true });
			var h23_nodes = children(h23);
			t19 = claim_text(h23_nodes, "Effective And Impactful Outcomes");
			h23_nodes.forEach(detach_dev);
			t20 = claim_space(div12_nodes);
			p4 = claim_element(div12_nodes, "P", { class: true });
			var p4_nodes = children(p4);
			t21 = claim_text(p4_nodes, "We focus on the customer experience from the day start. In\r\n            combination with our agile approach towards each product, we deliver\r\n            the qaulity that improve your business presence and makes an impact.");
			p4_nodes.forEach(detach_dev);
			div12_nodes.forEach(detach_dev);
			div13_nodes.forEach(detach_dev);
			t22 = claim_space(div23_nodes);
			div16 = claim_element(div23_nodes, "DIV", { class: true });
			var div16_nodes = children(div16);
			div15 = claim_element(div16_nodes, "DIV", { class: true });
			var div15_nodes = children(div15);
			div14 = claim_element(div15_nodes, "DIV", { class: true });
			var div14_nodes = children(div14);

			svg4 = claim_element(
				div14_nodes,
				"svg",
				{
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg4_nodes = children(svg4);
			path10 = claim_element(svg4_nodes, "path", { stroke: true, d: true }, 1);
			children(path10).forEach(detach_dev);
			path11 = claim_element(svg4_nodes, "path", { d: true }, 1);
			children(path11).forEach(detach_dev);
			path12 = claim_element(svg4_nodes, "path", { d: true }, 1);
			children(path12).forEach(detach_dev);
			svg4_nodes.forEach(detach_dev);
			div14_nodes.forEach(detach_dev);
			t23 = claim_space(div15_nodes);
			h24 = claim_element(div15_nodes, "H2", { class: true });
			var h24_nodes = children(h24);
			t24 = claim_text(h24_nodes, "Great ROI");
			h24_nodes.forEach(detach_dev);
			t25 = claim_space(div15_nodes);
			p5 = claim_element(div15_nodes, "P", { class: true });
			var p5_nodes = children(p5);
			t26 = claim_text(p5_nodes, "Although we’re a team, we do not overcharge to our clients just to\r\n            keep our team members work loaded. We have been accurate and digital\r\n            from the start. Using our small team, we focus on delivering the\r\n            best product design/development, without wasting your time and\r\n            budget.");
			p5_nodes.forEach(detach_dev);
			div15_nodes.forEach(detach_dev);
			div16_nodes.forEach(detach_dev);
			t27 = claim_space(div23_nodes);
			div19 = claim_element(div23_nodes, "DIV", { class: true });
			var div19_nodes = children(div19);
			div18 = claim_element(div19_nodes, "DIV", { class: true });
			var div18_nodes = children(div18);
			div17 = claim_element(div18_nodes, "DIV", { class: true });
			var div17_nodes = children(div17);

			svg5 = claim_element(
				div17_nodes,
				"svg",
				{
					class: true,
					viewBox: true,
					fill: true,
					stroke: true,
					"stroke-width": true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg5_nodes = children(svg5);
			path13 = claim_element(svg5_nodes, "path", { d: true }, 1);
			children(path13).forEach(detach_dev);
			circle = claim_element(svg5_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle).forEach(detach_dev);
			svg5_nodes.forEach(detach_dev);
			div17_nodes.forEach(detach_dev);
			t28 = claim_space(div18_nodes);
			h25 = claim_element(div18_nodes, "H2", { class: true });
			var h25_nodes = children(h25);
			t29 = claim_text(h25_nodes, "Undivided attention");
			h25_nodes.forEach(detach_dev);
			t30 = claim_space(div18_nodes);
			p6 = claim_element(div18_nodes, "P", { class: true });
			var p6_nodes = children(p6);
			t31 = claim_text(p6_nodes, "When we take on your project, our team is fully committed from start\r\n            to finish. It means constant progress, uninterrupted focus and\r\n            tangible results. When you decide to work with us, your project will\r\n            get all attention that it deserves.");
			p6_nodes.forEach(detach_dev);
			div18_nodes.forEach(detach_dev);
			div19_nodes.forEach(detach_dev);
			t32 = claim_space(div23_nodes);
			div22 = claim_element(div23_nodes, "DIV", { class: true });
			var div22_nodes = children(div22);
			div21 = claim_element(div22_nodes, "DIV", { class: true });
			var div21_nodes = children(div21);
			div20 = claim_element(div21_nodes, "DIV", { class: true });
			var div20_nodes = children(div20);

			svg6 = claim_element(
				div20_nodes,
				"svg",
				{
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg6_nodes = children(svg6);
			path14 = claim_element(svg6_nodes, "path", { stroke: true, d: true }, 1);
			children(path14).forEach(detach_dev);
			path15 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path15).forEach(detach_dev);
			path16 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path16).forEach(detach_dev);
			path17 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path17).forEach(detach_dev);
			path18 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path18).forEach(detach_dev);
			line7 = claim_element(svg6_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line7).forEach(detach_dev);
			line8 = claim_element(svg6_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line8).forEach(detach_dev);
			path19 = claim_element(svg6_nodes, "path", { d: true }, 1);
			children(path19).forEach(detach_dev);
			svg6_nodes.forEach(detach_dev);
			div20_nodes.forEach(detach_dev);
			t33 = claim_space(div21_nodes);
			h26 = claim_element(div21_nodes, "H2", { class: true });
			var h26_nodes = children(h26);
			t34 = claim_text(h26_nodes, "Small yet result oriented");
			h26_nodes.forEach(detach_dev);
			t35 = claim_space(div21_nodes);
			p7 = claim_element(div21_nodes, "P", { class: true });
			var p7_nodes = children(p7);
			t36 = claim_text(p7_nodes, "We are a team of passionate designers, developers with a strong zeal\r\n            to work with SMEs, emerging startups and individuals who need\r\n            technical help. We love coming to work every day and figuring out a\r\n            better World Wide Web for businesses and the end-users.");
			p7_nodes.forEach(detach_dev);
			div21_nodes.forEach(detach_dev);
			div22_nodes.forEach(detach_dev);
			div23_nodes.forEach(detach_dev);
			div24_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(div0, "class", "my-10 text-center");
			add_location(div0, file$1, 10, 6, 328);
			attr_dev(p0, "class", "lg:w-1/2 w-full leading-relaxed text-black text-2xl font-body");
			add_location(p0, file$1, 18, 6, 566);
			attr_dev(div1, "class", "flex flex-wrap w-full mb-20 flex-col items-center text-center");
			add_location(div1, file$1, 9, 4, 245);
			attr_dev(path0, "d", "M18 8h1a4 4 0 0 1 0 8h-1");
			add_location(path0, file$1, 41, 14, 1457);
			attr_dev(path1, "d", "M2 8h16v9a4 4 0 0 1-4 4H6a4 4 0 0 1-4-4V8z");
			add_location(path1, file$1, 42, 14, 1510);
			attr_dev(line0, "x1", "6");
			attr_dev(line0, "y1", "1");
			attr_dev(line0, "x2", "6");
			attr_dev(line0, "y2", "4");
			add_location(line0, file$1, 43, 14, 1581);
			attr_dev(line1, "x1", "10");
			attr_dev(line1, "y1", "1");
			attr_dev(line1, "x2", "10");
			attr_dev(line1, "y2", "4");
			add_location(line1, file$1, 44, 14, 1633);
			attr_dev(line2, "x1", "14");
			attr_dev(line2, "y1", "1");
			attr_dev(line2, "x2", "14");
			attr_dev(line2, "y2", "4");
			add_location(line2, file$1, 45, 14, 1687);
			attr_dev(svg0, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			attr_dev(svg0, "width", "24");
			attr_dev(svg0, "height", "24");
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg0, "fill", "none");
			attr_dev(svg0, "stroke", "currentColor");
			attr_dev(svg0, "stroke-width", "2");
			attr_dev(svg0, "stroke-linecap", "round");
			attr_dev(svg0, "stroke-linejoin", "round");
			add_location(svg0, file$1, 29, 12, 1066);
			attr_dev(div2, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div2, file$1, 26, 10, 920);
			attr_dev(h20, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h20, file$1, 48, 10, 1775);
			attr_dev(p1, "class", "leading-relaxed text-base font-body");
			add_location(p1, file$1, 51, 10, 1900);
			attr_dev(div3, "class", "shadow p-6 rounded-lg");
			add_location(div3, file$1, 25, 8, 873);
			attr_dev(div4, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div4, file$1, 24, 6, 828);
			attr_dev(path2, "stroke", "none");
			attr_dev(path2, "d", "M0 0h24v24H0z");
			add_location(path2, file$1, 74, 14, 2756);
			attr_dev(path3, "d", "M21 14l-3 -3h-7a1 1 0 0 1 -1 -1v-6a1 1 0 0 1 1 -1h9a1 1 0 0 1 1 1v10");
			add_location(path3, file$1, 75, 14, 2812);
			attr_dev(path4, "d", "M14 15v2a1 1 0 0 1 -1 1h-7l-3 3v-10a1 1 0 0 1 1 -1h2");
			add_location(path4, file$1, 78, 14, 2941);
			attr_dev(svg1, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg1, "width", "24");
			attr_dev(svg1, "height", "24");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			attr_dev(svg1, "stroke-width", "2");
			attr_dev(svg1, "stroke", "currentColor");
			attr_dev(svg1, "fill", "none");
			attr_dev(svg1, "stroke-linecap", "round");
			attr_dev(svg1, "stroke-linejoin", "round");
			add_location(svg1, file$1, 63, 12, 2415);
			attr_dev(div5, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div5, file$1, 60, 10, 2269);
			attr_dev(h21, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h21, file$1, 83, 10, 3088);
			attr_dev(p2, "class", "leading-relaxed text-base font-body");
			add_location(p2, file$1, 86, 10, 3230);
			attr_dev(div6, "class", "shadow p-6 rounded-lg");
			add_location(div6, file$1, 59, 8, 2222);
			attr_dev(div7, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div7, file$1, 58, 6, 2177);
			attr_dev(path5, "stroke", "none");
			attr_dev(path5, "d", "M0 0h24v24H0z");
			add_location(path5, file$1, 109, 14, 4083);
			attr_dev(rect0, "x", "3");
			attr_dev(rect0, "y", "15");
			attr_dev(rect0, "width", "6");
			attr_dev(rect0, "height", "6");
			attr_dev(rect0, "rx", "2");
			add_location(rect0, file$1, 110, 14, 4139);
			attr_dev(rect1, "x", "15");
			attr_dev(rect1, "y", "15");
			attr_dev(rect1, "width", "6");
			attr_dev(rect1, "height", "6");
			attr_dev(rect1, "rx", "2");
			add_location(rect1, file$1, 111, 14, 4204);
			attr_dev(rect2, "x", "9");
			attr_dev(rect2, "y", "3");
			attr_dev(rect2, "width", "6");
			attr_dev(rect2, "height", "6");
			attr_dev(rect2, "rx", "2");
			add_location(rect2, file$1, 112, 14, 4270);
			attr_dev(path6, "d", "M6 15v-1a2 2 0 0 1 2 -2h8a2 2 0 0 1 2 2v1");
			add_location(path6, file$1, 113, 14, 4334);
			attr_dev(line3, "x1", "12");
			attr_dev(line3, "y1", "9");
			attr_dev(line3, "x2", "12");
			attr_dev(line3, "y2", "12");
			add_location(line3, file$1, 114, 14, 4404);
			attr_dev(svg2, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg2, "width", "24");
			attr_dev(svg2, "height", "24");
			attr_dev(svg2, "viewBox", "0 0 24 24");
			attr_dev(svg2, "stroke-width", "2");
			attr_dev(svg2, "stroke", "currentColor");
			attr_dev(svg2, "fill", "none");
			attr_dev(svg2, "stroke-linecap", "round");
			attr_dev(svg2, "stroke-linejoin", "round");
			add_location(svg2, file$1, 98, 12, 3742);
			attr_dev(div8, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div8, file$1, 95, 10, 3596);
			attr_dev(h22, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h22, file$1, 117, 10, 4493);
			attr_dev(p3, "class", "leading-relaxed text-base font-body");
			add_location(p3, file$1, 120, 10, 4618);
			attr_dev(div9, "class", "shadow p-6 rounded-lg");
			add_location(div9, file$1, 94, 8, 3549);
			attr_dev(div10, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div10, file$1, 93, 6, 3504);
			attr_dev(path7, "stroke", "none");
			attr_dev(path7, "d", "M0 0h24v24H0z");
			add_location(path7, file$1, 143, 14, 5532);
			attr_dev(line4, "x1", "3");
			attr_dev(line4, "y1", "4");
			attr_dev(line4, "x2", "21");
			attr_dev(line4, "y2", "4");
			add_location(line4, file$1, 144, 14, 5588);
			attr_dev(path8, "d", "M4 4v10a2 2 0 0 0 2 2h12a2 2 0 0 0 2 -2v-10");
			add_location(path8, file$1, 145, 14, 5641);
			attr_dev(line5, "x1", "12");
			attr_dev(line5, "y1", "16");
			attr_dev(line5, "x2", "12");
			attr_dev(line5, "y2", "20");
			add_location(line5, file$1, 146, 14, 5713);
			attr_dev(line6, "x1", "9");
			attr_dev(line6, "y1", "20");
			attr_dev(line6, "x2", "15");
			attr_dev(line6, "y2", "20");
			add_location(line6, file$1, 147, 14, 5769);
			attr_dev(path9, "d", "M8 12l3 -3l2 2l3 -3");
			add_location(path9, file$1, 148, 14, 5824);
			attr_dev(svg3, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg3, "width", "24");
			attr_dev(svg3, "height", "24");
			attr_dev(svg3, "viewBox", "0 0 24 24");
			attr_dev(svg3, "stroke-width", "2");
			attr_dev(svg3, "stroke", "currentColor");
			attr_dev(svg3, "fill", "none");
			attr_dev(svg3, "stroke-linecap", "round");
			attr_dev(svg3, "stroke-linejoin", "round");
			add_location(svg3, file$1, 132, 12, 5191);
			attr_dev(div11, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div11, file$1, 129, 10, 5045);
			attr_dev(h23, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h23, file$1, 151, 10, 5906);
			attr_dev(p4, "class", "leading-relaxed text-base font-body");
			add_location(p4, file$1, 154, 10, 6043);
			attr_dev(div12, "class", "shadow p-6 rounded-lg");
			add_location(div12, file$1, 128, 8, 4998);
			attr_dev(div13, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div13, file$1, 127, 6, 4953);
			attr_dev(path10, "stroke", "none");
			attr_dev(path10, "d", "M0 0h24v24H0z");
			add_location(path10, file$1, 177, 14, 6959);
			attr_dev(path11, "d", "M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2");
			add_location(path11, file$1, 178, 14, 7015);
			attr_dev(path12, "d", "M12 3v3m0 12v3");
			add_location(path12, file$1, 180, 17, 7140);
			attr_dev(svg4, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg4, "width", "24");
			attr_dev(svg4, "height", "24");
			attr_dev(svg4, "viewBox", "0 0 24 24");
			attr_dev(svg4, "stroke-width", "2");
			attr_dev(svg4, "stroke", "currentColor");
			attr_dev(svg4, "fill", "none");
			attr_dev(svg4, "stroke-linecap", "round");
			attr_dev(svg4, "stroke-linejoin", "round");
			add_location(svg4, file$1, 166, 12, 6618);
			attr_dev(div14, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div14, file$1, 163, 10, 6472);
			attr_dev(h24, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h24, file$1, 183, 10, 7217);
			attr_dev(p5, "class", "leading-relaxed text-base font-body");
			add_location(p5, file$1, 186, 10, 7331);
			attr_dev(div15, "class", "shadow p-6 rounded-lg");
			add_location(div15, file$1, 162, 8, 6425);
			attr_dev(div16, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div16, file$1, 161, 6, 6380);
			attr_dev(path13, "d", "M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z");
			add_location(path13, file$1, 209, 14, 8295);
			attr_dev(circle, "cx", "12");
			attr_dev(circle, "cy", "12");
			attr_dev(circle, "r", "3");
			add_location(circle, file$1, 210, 14, 8368);
			attr_dev(svg5, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg5, "viewBox", "0 0 24 24");
			attr_dev(svg5, "fill", "none");
			attr_dev(svg5, "stroke", "currentColor");
			attr_dev(svg5, "stroke-width", "2");
			attr_dev(svg5, "stroke-linecap", "round");
			attr_dev(svg5, "stroke-linejoin", "round");
			add_location(svg5, file$1, 200, 12, 8007);
			attr_dev(div17, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div17, file$1, 197, 10, 7861);
			attr_dev(h25, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h25, file$1, 213, 10, 8450);
			attr_dev(p6, "class", "leading-relaxed text-base font-body");
			add_location(p6, file$1, 216, 10, 8574);
			attr_dev(div18, "class", "shadow p-6 rounded-lg");
			add_location(div18, file$1, 196, 8, 7814);
			attr_dev(div19, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div19, file$1, 195, 6, 7769);
			attr_dev(path14, "stroke", "none");
			attr_dev(path14, "d", "M0 0h24v24H0z");
			add_location(path14, file$1, 240, 14, 9543);
			attr_dev(path15, "d", "M4 8v-2a2 2 0 0 1 2 -2h2");
			add_location(path15, file$1, 241, 14, 9599);
			attr_dev(path16, "d", "M4 16v2a2 2 0 0 0 2 2h2");
			add_location(path16, file$1, 242, 14, 9652);
			attr_dev(path17, "d", "M16 4h2a2 2 0 0 1 2 2v2");
			add_location(path17, file$1, 243, 14, 9704);
			attr_dev(path18, "d", "M16 20h2a2 2 0 0 0 2 -2v-2");
			add_location(path18, file$1, 244, 14, 9756);
			attr_dev(line7, "x1", "9");
			attr_dev(line7, "y1", "10");
			attr_dev(line7, "x2", "9.01");
			attr_dev(line7, "y2", "10");
			add_location(line7, file$1, 245, 14, 9811);
			attr_dev(line8, "x1", "15");
			attr_dev(line8, "y1", "10");
			attr_dev(line8, "x2", "15.01");
			attr_dev(line8, "y2", "10");
			add_location(line8, file$1, 246, 14, 9868);
			attr_dev(path19, "d", "M9.5 15a3.5 3.5 0 0 0 5 0");
			add_location(path19, file$1, 247, 14, 9927);
			attr_dev(svg6, "class", "h-8 w-8 text-pink-500");
			attr_dev(svg6, "width", "24");
			attr_dev(svg6, "height", "24");
			attr_dev(svg6, "viewBox", "0 0 24 24");
			attr_dev(svg6, "stroke-width", "2");
			attr_dev(svg6, "stroke", "currentColor");
			attr_dev(svg6, "fill", "none");
			attr_dev(svg6, "stroke-linecap", "round");
			attr_dev(svg6, "stroke-linejoin", "round");
			add_location(svg6, file$1, 229, 12, 9202);
			attr_dev(div20, "class", "w-10 h-10 inline-flex items-center justify-center rounded-full bg-pink-100 text-pink-500 mb-4");
			add_location(div20, file$1, 226, 10, 9056);
			attr_dev(h26, "class", "text-lg text-gray-900 font-medium title-font mb-2");
			add_location(h26, file$1, 250, 10, 10015);
			attr_dev(p7, "class", "leading-relaxed text-base font-body");
			add_location(p7, file$1, 253, 10, 10145);
			attr_dev(div21, "class", "shadow p-6 rounded-lg");
			add_location(div21, file$1, 225, 8, 9009);
			attr_dev(div22, "class", "xl:w-1/3 md:w-1/2 p-4");
			add_location(div22, file$1, 224, 6, 8964);
			attr_dev(div23, "class", "flex flex-wrap -m-4");
			add_location(div23, file$1, 23, 4, 787);
			attr_dev(div24, "class", "container px-5 py-24 pb-20 mx-auto");
			add_location(div24, file$1, 8, 2, 191);
			attr_dev(section, "id", "whyus");
			attr_dev(section, "class", "text-gray-600 body-font bg-gradient-to-r from-gray-100 via-gray-50 to-gray-0 svelte-1u9un97");
			add_location(section, file$1, 4, 0, 74);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div24);
			append_dev(div24, div1);
			append_dev(div1, div0);
			mount_component(heading, div0, null);
			append_dev(div1, t0);
			append_dev(div1, p0);
			append_dev(p0, t1);
			append_dev(div24, t2);
			append_dev(div24, div23);
			append_dev(div23, div4);
			append_dev(div4, div3);
			append_dev(div3, div2);
			append_dev(div2, svg0);
			append_dev(svg0, path0);
			append_dev(svg0, path1);
			append_dev(svg0, line0);
			append_dev(svg0, line1);
			append_dev(svg0, line2);
			append_dev(div3, t3);
			append_dev(div3, h20);
			append_dev(h20, t4);
			append_dev(div3, t5);
			append_dev(div3, p1);
			append_dev(p1, t6);
			append_dev(div23, t7);
			append_dev(div23, div7);
			append_dev(div7, div6);
			append_dev(div6, div5);
			append_dev(div5, svg1);
			append_dev(svg1, path2);
			append_dev(svg1, path3);
			append_dev(svg1, path4);
			append_dev(div6, t8);
			append_dev(div6, h21);
			append_dev(h21, t9);
			append_dev(div6, t10);
			append_dev(div6, p2);
			append_dev(p2, t11);
			append_dev(div23, t12);
			append_dev(div23, div10);
			append_dev(div10, div9);
			append_dev(div9, div8);
			append_dev(div8, svg2);
			append_dev(svg2, path5);
			append_dev(svg2, rect0);
			append_dev(svg2, rect1);
			append_dev(svg2, rect2);
			append_dev(svg2, path6);
			append_dev(svg2, line3);
			append_dev(div9, t13);
			append_dev(div9, h22);
			append_dev(h22, t14);
			append_dev(div9, t15);
			append_dev(div9, p3);
			append_dev(p3, t16);
			append_dev(div23, t17);
			append_dev(div23, div13);
			append_dev(div13, div12);
			append_dev(div12, div11);
			append_dev(div11, svg3);
			append_dev(svg3, path7);
			append_dev(svg3, line4);
			append_dev(svg3, path8);
			append_dev(svg3, line5);
			append_dev(svg3, line6);
			append_dev(svg3, path9);
			append_dev(div12, t18);
			append_dev(div12, h23);
			append_dev(h23, t19);
			append_dev(div12, t20);
			append_dev(div12, p4);
			append_dev(p4, t21);
			append_dev(div23, t22);
			append_dev(div23, div16);
			append_dev(div16, div15);
			append_dev(div15, div14);
			append_dev(div14, svg4);
			append_dev(svg4, path10);
			append_dev(svg4, path11);
			append_dev(svg4, path12);
			append_dev(div15, t23);
			append_dev(div15, h24);
			append_dev(h24, t24);
			append_dev(div15, t25);
			append_dev(div15, p5);
			append_dev(p5, t26);
			append_dev(div23, t27);
			append_dev(div23, div19);
			append_dev(div19, div18);
			append_dev(div18, div17);
			append_dev(div17, svg5);
			append_dev(svg5, path13);
			append_dev(svg5, circle);
			append_dev(div18, t28);
			append_dev(div18, h25);
			append_dev(h25, t29);
			append_dev(div18, t30);
			append_dev(div18, p6);
			append_dev(p6, t31);
			append_dev(div23, t32);
			append_dev(div23, div22);
			append_dev(div22, div21);
			append_dev(div21, div20);
			append_dev(div20, svg6);
			append_dev(svg6, path14);
			append_dev(svg6, path15);
			append_dev(svg6, path16);
			append_dev(svg6, path17);
			append_dev(svg6, path18);
			append_dev(svg6, line7);
			append_dev(svg6, line8);
			append_dev(svg6, path19);
			append_dev(div21, t33);
			append_dev(div21, h26);
			append_dev(h26, t34);
			append_dev(div21, t35);
			append_dev(div21, p7);
			append_dev(p7, t36);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(heading.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(heading.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(heading);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$1.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$1($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Whyus", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Whyus> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ Heading });
	return [];
}

class Whyus extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Whyus",
			options,
			id: create_fragment$1.name
		});
	}
}

/* src\routes\about.svelte generated by Svelte v3.29.4 */
const file$2 = "src\\routes\\about.svelte";

function create_fragment$2(ctx) {
	let svelteseo;
	let t0;
	let section;
	let div1;
	let div0;
	let heading;
	let t1;
	let p;
	let t2;
	let t3;
	let whyus;
	let t4;
	let contact;
	let current;

	svelteseo = new SvelteSeo({
			props: {
				title: "About Us",
				description: "We are a team of passionate ui/ux designers, developers, and coders",
				openGraph: {
					title: "About Us",
					description: "We are a team of passionate ui/ux designers, developers, and coders",
					url: "https://www.webdesign-ninjas.com/about",
					type: "website",
					images: [
						{
							url: "https://www.example.com/images/og-image.jpg",
							width: 850,
							height: 650,
							alt: "Og Image Alt"
						}
					]
				}
			},
			$$inline: true
		});

	heading = new Heading({
			props: {
				text: "Who We Are",
				size: "text-4xl sm:text-5xl md:text-6xl",
				heading: "font-heading1 text-center mb-8",
				color: "text-pink-500"
			},
			$$inline: true
		});

	whyus = new Whyus({ $$inline: true });

	contact = new Contact({
			props: {
				contactbg: "bg-gradient-to-r from-gray-100 via-gray-50 to-gray-0"
			},
			$$inline: true
		});

	const block = {
		c: function create() {
			create_component(svelteseo.$$.fragment);
			t0 = space();
			section = element("section");
			div1 = element("div");
			div0 = element("div");
			create_component(heading.$$.fragment);
			t1 = space();
			p = element("p");
			t2 = text("We are a team of passionate ui/ux designers, developers, and coders with\r\n        a strong zeal to work with SMEs, emerging startups and individuals who\r\n        need technical help. In the last 12 years, We got the opportunity to\r\n        work with many clients across the globe and We figured out that most of\r\n        my client's wanted someone who they could trust as a technical partner\r\n        for their products. Someone, who can give suggestions right from what\r\n        tech should be picked up, how to get the UX right, how we should plan\r\n        the product to launch and a lot more...");
			t3 = space();
			create_component(whyus.$$.fragment);
			t4 = space();
			create_component(contact.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			claim_component(svelteseo.$$.fragment, nodes);
			t0 = claim_space(nodes);
			section = claim_element(nodes, "SECTION", { class: true });
			var section_nodes = children(section);
			div1 = claim_element(section_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			div0 = claim_element(div1_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);
			claim_component(heading.$$.fragment, div0_nodes);
			t1 = claim_space(div0_nodes);
			p = claim_element(div0_nodes, "P", { class: true });
			var p_nodes = children(p);
			t2 = claim_text(p_nodes, "We are a team of passionate ui/ux designers, developers, and coders with\r\n        a strong zeal to work with SMEs, emerging startups and individuals who\r\n        need technical help. In the last 12 years, We got the opportunity to\r\n        work with many clients across the globe and We figured out that most of\r\n        my client's wanted someone who they could trust as a technical partner\r\n        for their products. Someone, who can give suggestions right from what\r\n        tech should be picked up, how to get the UX right, how we should plan\r\n        the product to launch and a lot more...");
			p_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			t3 = claim_space(nodes);
			claim_component(whyus.$$.fragment, nodes);
			t4 = claim_space(nodes);
			claim_component(contact.$$.fragment, nodes);
			this.h();
		},
		h: function hydrate() {
			attr_dev(p, "class", "lg:w-1/2 w-full leading-relaxed text-gray-500");
			add_location(p, file$2, 42, 6, 1320);
			attr_dev(div0, "class", "flex flex-wrap w-full mb-20 flex-col items-center text-center");
			add_location(div0, file$2, 30, 4, 912);
			attr_dev(div1, "class", "container py-24 mx-auto");
			add_location(div1, file$2, 29, 2, 869);
			attr_dev(section, "class", "text-gray-600 body-font");
			add_location(section, file$2, 28, 0, 824);
		},
		m: function mount(target, anchor) {
			mount_component(svelteseo, target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, section, anchor);
			append_dev(section, div1);
			append_dev(div1, div0);
			mount_component(heading, div0, null);
			append_dev(div0, t1);
			append_dev(div0, p);
			append_dev(p, t2);
			insert_dev(target, t3, anchor);
			mount_component(whyus, target, anchor);
			insert_dev(target, t4, anchor);
			mount_component(contact, target, anchor);
			current = true;
		},
		p: noop,
		i: function intro(local) {
			if (current) return;
			transition_in(svelteseo.$$.fragment, local);
			transition_in(heading.$$.fragment, local);
			transition_in(whyus.$$.fragment, local);
			transition_in(contact.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(svelteseo.$$.fragment, local);
			transition_out(heading.$$.fragment, local);
			transition_out(whyus.$$.fragment, local);
			transition_out(contact.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			destroy_component(svelteseo, detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(section);
			destroy_component(heading);
			if (detaching) detach_dev(t3);
			destroy_component(whyus, detaching);
			if (detaching) detach_dev(t4);
			destroy_component(contact, detaching);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment$2.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance$2($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("About", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<About> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ SvelteSeo, Whyus, Contact, Heading });
	return [];
}

class About extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "About",
			options,
			id: create_fragment$2.name
		});
	}
}

export default About;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
